# Created on June 13, 2023
# Update history: June 13, 19-21 2023

# What is this code for?
# 1. Screen unnecessary .wrl files for clearance check via VICTORIA
# 2. The group of .wrl files are to be generated by VICTORIA
# 3. CATIA > generate .wrl file > VICTORIA > generate .wrl files

# Memo: command for GUI generation
# pyinstaller --hidden-import natsort --onefile --windowed --add-data "dummy.PNG;." GUI_ver7.py comments.py sizescreen.py remove.py extraction.py output.py merge.py coil.py calculation.py rename.py
# 11 .py files plus 1 image file are included for compiling
# compiling - stable via python 3.10 on VisualStudio
# execution - stable via python 3.9 on VisualStudio

import tkinter as tk
from tkinter import *
from tkinter import messagebox
from PIL import Image, ImageTk
import numpy as np
import matplotlib.pyplot as plt

#
import io
#from PIL import ImageTk, Image
import PIL.Image

#
import matplotlib
matplotlib.use('TkAgg')
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from matplotlib.figure import Figure

# for path reader, https://stackoverflow.com/questions/43516019/python-tkinter-browse-folder-button
from tkinter import filedialog
from tkinter import *

# for progress bar
from tkinter import ttk
from tkinter.ttk import Progressbar
#from tqdm.tk import tqdm
import threading
import time

#
import sys
import os
import glob
from natsort import natsorted

# import functions from .py files
from comments import begin               # import function, called in the main routine
from comments import end                 # import function, called in the main routine
from sizescreen import screenfilesize    # import function, called in the main routine
from remove import RemoveDirectory       # import function, called in the main routine
from extraction import CoordinateCatch   # import function, called in the main routine
from output import writetofile           # import function, called in the main routine
from merge import FileMerge              # import function, called in the main routine
from coil import CoilCoordinate          # import function, called in the main routine
from calculation import JudgeCalculation # import function, called in the main routine
from rename import RenameToCoil          # import function, called in the main routine
from rename import RemoveCoil            # import function, called in the main routine
from remove import RemoveDatWorkFolder   # import function, called in the main routine

#
class GUI(tk.Frame):
    def __init__(self, master):
        tk.Frame.__init__(self, master)
        self.master=master

        self.frame=Frame(self)
        self.inner=Frame(self)
        self.frame.grid()
        self.inner.grid()

        # Load image (start)
        # function for path
        def resource_path(relative_path):
            try:
                base_path = sys._MEIPASS
                #print('MEIPASS')
            except Exception:
                base_path = os.path.abspath(".")
                #print('Absolute PASS')
            return os.path.join(base_path, relative_path)

        # load image
        load = PIL.Image.open(resource_path("dummy.png"))

        # Resize the image using resize() method
        resize_image = load.resize((338, 253)) # width x height
        render = ImageTk.PhotoImage(resize_image)
        img = Label(self, image=render)
        img.image = render
        img.place(x=35, y=24)
        # Load image (end)

        #
        self.folder_path = StringVar(master)
        self.b_path = Button(self, text="Path", command=self.browse_button)
        self.b_path.grid(row=0, column=0)

        self.lbl1=Entry(self, width=56)
        self.lbl1.insert(END, ' ')      # initial value
        self.lbl1.grid(row=0, column=1) # a selected path is visible

        # call screening function
        self.b_function=Button(self,text="Start", command=self.progressBar)
        self.b_function.grid(row=1,column=0)

        # Exist button
        self.exit_button = Button(self, text="Exit", command=master.destroy) # not self but master
        self.exit_button.grid(row=2,column=0,padx=0)

    #
    def progressBar(self): # self.screen function is targeted
        # subwindow
        self.sub = tk.Toplevel()
        self.sub.title('ProgressBar')
        self.sub.geometry('100x30') # width x height

        # progress bar
        self.p = ttk.Progressbar(self.sub, mode="indeterminate", )
        self.p.pack()
        self.p.start(3) # interval millisecond

        #
        self.thread = threading.Thread(target=self.screening)
        self.thread.start()

    #
    def browse_button(self):
        # Allow user to select a directory and store it in global var
        # called folder_path
        filename = filedialog.askdirectory()
        self.folder_path.set(filename)
        print(filename)
        self.lbl1.insert(END, filename) # a selected path is visible

    #
    def screening(self):
        start = time.time()

        #
        if len(self.folder_path.get()) != 0 and os.path.isdir(os.path.join(self.folder_path.get(),'Excluded')) == True: # folder_path - from browse_button(self)
            messagebox.showinfo('Information', 'Screening was already done.')
            self.p.stop()       # stop progress bar
            self.sub.destroy()  # destroy subwindow

        elif len(self.folder_path.get()) != 0 and os.path.isdir(os.path.join(self.folder_path.get(),'Excluded')) == False:

            # specify your folder of .wrl files, this is referred in the external functions
            wrl_dir = self.folder_path.get()

            # removal of unnecessary directories/files
            RemoveDirectory(wrl_dir)

            # judgement routine starts
            begin()

            files = glob.glob(os.path.join(wrl_dir + '\*.wrl'))

            # check the number of .wrl files
            counter = 0
            for file in sorted(files):
                counter += 1

            end = counter
            #
            try:
                if(counter == 0):
                    messagebox.showerror('Error', 'No .wrl file was found. Please generate a group of .wrl files via VICTORIA.')
                    self.p.stop()       # stop progress bar
                    self.sub.destroy()  # destroy subwindow

                elif(counter == 1):
                    messagebox.showerror('Error', 'Only one .wrl file was found. Perhaps splitting into a group of .wrl files was not done. Please back to VICTORIA.')
                    self.p.stop()       # stop progress bar
                    self.sub.destroy()  # destroy subwindow

                else:

                    # extraction and merge
                    counter = 0
                    for file in natsorted(files):

                        print(os.path.split(file)[1])
                        wrl_file = os.path.split(file)[1]

                        # extraction routine
                        num1 = CoordinateCatch(wrl_dir, wrl_file)[0]    # call function, extraction
                        num2 = CoordinateCatch(wrl_dir, wrl_file)[1]    # call function, extraction
                        writetofile(num1, num2, wrl_dir, wrl_file)      # call function, output

                        # merge text files
                        FileMerge(wrl_dir, wrl_file)                    # call function, merge - create .dat

                        counter += 1

                    # judge which extracted .dat is the coil, rename the file
                    coil_zmax = CoilCoordinate(wrl_dir, counter)[0]     # call function, coil
                    coil_zmin = CoilCoordinate(wrl_dir, counter)[1]     # call function, coil
                    coil_oradius = CoilCoordinate(wrl_dir, counter)[2]  # call function, coil
                    coil_iradius = CoilCoordinate(wrl_dir, counter)[3]  # call function, coil
                    coil_center_x = CoilCoordinate(wrl_dir, counter)[4] # call function, coil
                    coil_center_y = CoilCoordinate(wrl_dir, counter)[5] # call function, coil
                    counter_skip = 0

                    # make directory
                    wrl_excluded = 'Excluded'
                    dest_directory = os.path.join(wrl_dir, wrl_excluded)
                    os.mkdir(dest_directory)

                    # comparison and judgement
                    for i in range(1, counter+1, 1):
                        wrl_file = 'Part_' + str(i) + '.wrl'

                        if i < counter:

                            # calculation & judge
                            sflag = JudgeCalculation(wrl_dir, wrl_file, dest_directory, coil_zmax, coil_zmin, coil_oradius, coil_center_x, coil_center_y) # call function, '\' symbol cannot be used in Visual Studio for new line

                            if sflag==1:
                                counter_skip += 1
                            else:
                                counter_skip += 0

                        elif i == counter:
                            print('This is a coil, part number: ' + str(counter) + '. Renamed.')
                            RenameToCoil(wrl_dir, i)                    # call function, rename
                            RemoveCoil(wrl_dir, i)                      # call function, remove

                    # judgement routine ends
                    print('Total ' + str(counter_skip) + ' parts were skipped.')

                    # removal of unnecessary .dat files
                    RemoveDatWorkFolder(wrl_dir)                        # call function, remove

                    messagebox.showinfo('Information', 'Screening was completed.')

                    self.p.stop()       # stop progress bar
                    self.sub.destroy()  # destroy subwindow

            except:
                print('Screening program was executed properly.')
                self.p.stop()       # stop progress bar
                self.sub.destroy()  # destroy subwindow
        else:
            messagebox.showerror('Error', 'Please specify your path to .wrl files.')
            self.p.stop()       # stop progress bar
            self.sub.destroy()  # destroy subwindow

            return None
#
def main():
    root = tk.Tk()
    root.title('WRLEraser')
    GUI(root).pack(expand=True, fill='both')
    root.geometry("400x300") # width x height
    root.resizable(0,0)      # prohibit resizing the window
    root.mainloop()

#
if __name__ == "__main__":
    main()
